--marketplace validators
CREATE OR REPLACE TRIGGER VALIDATE_PURCHASE
BEFORE INSERT
ON PURCHASES
FOR EACH ROW
DECLARE
   STAT VARCHAR(1);
BEGIN
	SELECT STATUS INTO STAT FROM TRANSACTIONS WHERE TRANS_ID = :NEW.TRANS_ID;
    IF STAT != 'S' THEN
        RAISE_APPLICATION_ERROR(-20001,'FAILED TRANSACTION');
    END IF;  
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002,'TRANSACTION MISSING');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003,'UNEXPECTED ERROR'); 
END;
/


CREATE OR REPLACE TRIGGER VALIDATE_SUBSCRIBE
BEFORE INSERT
ON SUBSCRIPTION
FOR EACH ROW
DECLARE
   STAT VARCHAR(1);
BEGIN
	SELECT STATUS INTO STAT FROM TRANSACTIONS WHERE TRANS_ID = :NEW.TRANS_ID;
    IF STAT != 'S' THEN
        RAISE_APPLICATION_ERROR(-20001,'FAILED TRANSACTION');
    END IF;  
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002,'TRANSACTION MISSING');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003,'UNEXPECTED ERROR'); 
END;
/

--generaation

CREATE OR REPLACE TRIGGER GENERATE_PRICE
AFTER INSERT
ON ALBUMS
FOR EACH ROW
DECLARE
   BUY NUMBER;
   RENT NUMBER;
BEGIN
	BUY := ROUND(DBMS_RANDOM.VALUE(6,20),2);
    RENT := ROUND(BUY*DBMS_RANDOM.VALUE(0.5,0.15),2);

    INSERT INTO PRICES VALUES (PRICES_SEQ.NEXTVAL,:NEW.ALBUM_ID,'PRCS',SYSDATE,ADD_MONTHS(SYSDATE,12),BUY);
    INSERT INTO PRICES VALUES (PRICES_SEQ.NEXTVAL,:NEW.ALBUM_ID,'SUBS',SYSDATE,ADD_MONTHS(SYSDATE,12),RENT);
EXCEPTION
    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE('UNEXPECTED ERROR OCCURED DURING PRICE GENERATION');
END;
/

--blocking users

CREATE OR REPLACE TRIGGER trg_follow_notification
AFTER INSERT ON following
FOR EACH ROW
BEGIN
    INSERT INTO notifications (
        notification_id,
        recipient_id,
        sender_id,
        message,
        created_at
    ) VALUES (
        notification_seq.NEXTVAL,
        :NEW.followee_id,
        :NEW.follower_id,
        'You have a new follower!',
        SYSDATE
    );
END;
/

-- follow notif